#include<stdio.h>
#include<stdlib.h>
#include<string.h>
struct ShoopingItem{
	char name[50];
	int quantity;
	struct ShoppingItem *next;
};

struct ShoppingItem *shoppingList=NULL;


//1. 添加商品到购物清单：
void addItem(char itemName[],int itemQuantity){
	struct ShoppingItem *newItem=(struct ShoppingItem*)malloc(sizeof(struct ShoppingItem));
	scanf("%s %d",newItem->name,newItem->quantity);
	newItem->next=shoppinglist->next;
	shoppingList->next=newItem;
}
//2. 从购物清单中移除商品：
void removeItem(char itemName[]) {
	struct ShoppingItem* current = shoppingList;
	struct ShoppingItem* previous = NULL;
 	while (current != NULL) {
 		if (strcmp(current->name, itemName) == 0) {
 			if (previous != NULL) {
				previous->next = current->next;
 			} 
			else {
			 	shoppingList = current->next;
 			}
 			free(current);
 			break;
 		}
		previous = current;
		current = current->next;
	
 	}
}

//3. 查看购物清单：
void displayList() {
 	struct ShoppingItem* current = shoppingList;
 	printf("购物清单:\n");
 	while (current != NULL) {
 		printf("%s - 数量：%d\n", current->name, current->quantity);
		current=current->next;
 	}
}

//4. 修改购物清单中商品的数量：
void updateQuantity(char itemName[], int newItemQuantity) {
 	struct ShoppingItem* current = shoppingList;
 	while (current != NULL) {
 		if (strcmp(current->name, itemName) == 0) {
 			current->quantity=newItemQuantity;
 			break;
 		}
 		current = current->next;
 	}
}
//5. 清空购物清单：
void clearList() {
 	while (shoppingList != NULL) {
		struct ShoppingItem*temp=shoppingList;
		shoppingList=temp->next;
 		free(temp);
 	}
}
//6. 计算购物清单中商品的总数量：
int totalQuantity() {
 	struct ShoppingItem* current = shoppingList;
 	int total = 0;
 	while (current != NULL) {
 		total += current->quantity;
		current = current->next;
 	}
	return total;
}

//7. 查找购物清单中的商品：
void findItem(char itemName[]) {
 	struct ShoppingItem* current = shoppingList;
 	printf("查找商品 \"%s\" ：\n", itemName);
 	while (current != NULL) {
 		if (strcmp(current->name, itemName) == 0) {
 			printf("%s - 数量：%d\n", current->name, current->quantity);
 			return;
 		}
		current=current->next;
	}
 	printf("未找到商品 \"%s\"。\n", itemName);
}
//8. 排序购物清单：
void sortList() {
 	struct ShoppingItem* current = shoppingList;
 	struct ShoppingItem* nextItem = NULL;
 	char tempName[50];
 	int tempQuantity;
 	while (current != NULL) {
 		nextItem = current->next;
 		while (nextItem != NULL) {
 			if (strcmp(current->name, nextItem->name) > 0) {
 				// 交换商品信息
 				//此处填写 3 句；
 				tempQuantity = current->quantity;
 				current->quantity = nextItem->quantity;
 				nextItem->quantity = tempQuantity;
 			}			
 			nextItem = nextItem->next;
 		}
 		current = current->next;
 	}
}
//9. 合并购物清单：假设你有两个不同的购物清单，你希望将它们合并成一个。
void mergeLists(struct ShoppingItem** list1, struct ShoppingItem** list2) {
 	struct ShoppingItem* current = *list1;
 	// 遍历到第一个购物清单的末尾
 	while (current->next)
		current = current->next;
 	// 将第二个购物清单连接到第一个清单的末尾
 	current->next = *list2;
 	*list2 = NULL; // 清空第二个购物清单的头指针，防止误用
 	}
}
//10. 删除购物清单中的商品：
//实现一个函数，可以根据商品名称删除购物清单中的商品项。如果有多个相同名称的商品，
//可以选择删除其中一个或全部。
void deleteItem(char itemName[], int deleteAll) {
 	struct ShoppingItem* current = shoppingList;
 	struct ShoppingItem* prev = NULL;
 	while (current != NULL) {
 		if (strcmp(current->name, itemName) == 0) {
 			if (prev == NULL) {
 				// 如果要删除的是第一个节点
 				struct ShoppingItem* temp = shoppingList;
				//填写一句；
				shoppingList=temp->next;
 				free(temp);
				if (!deleteAll) break;
 			} 
			else {
 				// 如果要删除的不是第一个节点
 				//填写一句；
 				current=current->next;
 				free(current);
 				current = prev->next;
 				if (!deleteAll) break;
 			}
 		} 
		else {
 			prev = current;
 			current = current->next;
 		}		
 	}
}

int main()
{
	//1. 添加商品到购物清单：
	addItem("ruler",int 1);
	addItem("pen",int 1);
	addItem("eraser",int 1);
	
	printf("Shopping List:\n");
	displayList();
	//2. 从购物清单中移除商品：
	removeItem("pen");
	
	printf("Shopping List:\n");
	displayList();
	//4. 修改购物清单中商品的数量：
	updateQuantity("ruler", 3);
	
	printf("Shopping List:\n");
	displayList();
	//6. 计算购物清单中商品的总数量：
	totalQuantity();
	
	printf("商品总数量：\n");
	pirntf("%d",totalQuantity());
	//7. 查找购物清单中的商品：
	findItem("pen");
	//8. 排序购物清单：
	sortList();
	
	printf("Shopping List:\n");
	displayList();
	//9. 合并购物清单
	
		//创建第二个购物清单
	struct ShoppingItem *list2;
	struct ShoppingItem *newItem=(struct ShoppingItem*)malloc(sizeof(struct ShoppingItem));
	scanf("%s %d",newItem->name,newItem->quantity);
	newItem->next=list2->next;
	list2->next=nemItem;
	
	mergeLists(struct ShoppingItem** shoppingList, struct ShoppingItem** list2)
	
	printf("Shopping List:\n");
	displayList();
	
	//10. 删除购物清单中的商品：
	deleteItem("ruler", 1);
	
	printf("Shopping List:\n");
	displayList();
}
